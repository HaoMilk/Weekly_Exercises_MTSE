// scripts/testDuplicateImageAPI.js
import axios from "axios";

const API_BASE_URL = "http://localhost:3000/api";

async function testDuplicateImageAPI() {
  try {
    console.log("üß™ B·∫Øt ƒë·∫ßu test API qu·∫£n l√Ω h√¨nh ·∫£nh tr√πng l·∫∑p...");

    // Test 1: Ki·ªÉm tra ph√¢n trang
    console.log("\nüìÑ Test 1: Ki·ªÉm tra ph√¢n trang");
    const paginationResponse = await axios.get(`${API_BASE_URL}/products/validate-pagination?pageSize=5&maxPages=3`);
    console.log("‚úÖ K·∫øt qu·∫£ ki·ªÉm tra ph√¢n trang:", paginationResponse.data);

    // Test 2: L√†m s·∫°ch h√¨nh ·∫£nh tr√πng l·∫∑p
    console.log("\nüßπ Test 2: L√†m s·∫°ch h√¨nh ·∫£nh tr√πng l·∫∑p");
    const cleanResponse = await axios.post(`${API_BASE_URL}/products/clean-duplicates`);
    console.log("‚úÖ K·∫øt qu·∫£ l√†m s·∫°ch:", cleanResponse.data);

    // Test 3: Ki·ªÉm tra l·∫°i ph√¢n trang sau khi l√†m s·∫°ch
    console.log("\nüîç Test 3: Ki·ªÉm tra l·∫°i ph√¢n trang sau khi l√†m s·∫°ch");
    const recheckResponse = await axios.get(`${API_BASE_URL}/products/validate-pagination?pageSize=5&maxPages=3`);
    console.log("‚úÖ K·∫øt qu·∫£ ki·ªÉm tra l·∫°i:", recheckResponse.data);

    // Test 4: Test ph√¢n trang th·ª±c t·∫ø
    console.log("\nüìä Test 4: Test ph√¢n trang th·ª±c t·∫ø");
    for (let page = 1; page <= 3; page++) {
      const productsResponse = await axios.get(`${API_BASE_URL}/products?page=${page}&limit=5`);
      const products = productsResponse.data.products;
      
      console.log(`\nüìÑ Trang ${page}:`);
      console.log(`- S·ªë s·∫£n ph·∫©m: ${products.length}`);
      
      const imageUrls = new Set();
      products.forEach(product => {
        if (product.images && product.images.length > 0) {
          product.images.forEach(image => {
            if (image.url) {
              imageUrls.add(image.url);
            }
          });
        }
      });
      
      console.log(`- S·ªë h√¨nh ·∫£nh duy nh·∫•t: ${imageUrls.size}`);
      console.log(`- T·ª∑ l·ªá tr√πng l·∫∑p: ${((products.reduce((sum, p) => sum + (p.images?.length || 0), 0) - imageUrls.size) / products.reduce((sum, p) => sum + (p.images?.length || 0), 0) * 100).toFixed(2)}%`);
    }

    console.log("\nüéâ Ho√†n th√†nh test API!");

  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh test:", error.response?.data || error.message);
  }
}

// Ch·∫°y test
testDuplicateImageAPI();
