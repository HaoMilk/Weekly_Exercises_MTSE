// scripts/cleanupDuplicateImages.js
import mongoose from "mongoose";
import { connectDB } from "../src/config/db.js";
import { cleanDuplicateImages, validatePaginationConsistency } from "../src/services/product.service.js";

async function cleanupDuplicateImages() {
  try {
    await connectDB();
    console.log("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh l√†m s·∫°ch h√¨nh ·∫£nh tr√πng l·∫∑p...");

    // B∆∞·ªõc 1: Ki·ªÉm tra h√¨nh ·∫£nh tr√πng l·∫∑p hi·ªán t·∫°i
    console.log("\nüìä B∆∞·ªõc 1: Ki·ªÉm tra h√¨nh ·∫£nh tr√πng l·∫∑p hi·ªán t·∫°i");
    const checkResult = await checkDuplicateImages();
    
    if (checkResult.duplicateImages === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ h√¨nh ·∫£nh tr√πng l·∫∑p c·∫ßn l√†m s·∫°ch!");
      return;
    }

    // B∆∞·ªõc 2: L√†m s·∫°ch h√¨nh ·∫£nh tr√πng l·∫∑p
    console.log("\nüßπ B∆∞·ªõc 2: L√†m s·∫°ch h√¨nh ·∫£nh tr√πng l·∫∑p");
    const cleanResult = await cleanDuplicateImages();
    
    console.log(`\nüìà K·∫øt qu·∫£ l√†m s·∫°ch:`);
    console.log(`- S·ªë s·∫£n ph·∫©m ƒë∆∞·ª£c l√†m s·∫°ch: ${cleanResult.cleanedProducts}`);
    console.log(`- S·ªë h√¨nh ·∫£nh tr√πng l·∫∑p ƒë∆∞·ª£c lo·∫°i b·ªè: ${cleanResult.duplicateImages}`);

    // B∆∞·ªõc 3: Ki·ªÉm tra l·∫°i sau khi l√†m s·∫°ch
    console.log("\nüîç B∆∞·ªõc 3: Ki·ªÉm tra l·∫°i sau khi l√†m s·∫°ch");
    const recheckResult = await checkDuplicateImages();
    
    if (recheckResult.duplicateImages === 0) {
      console.log("‚úÖ ƒê√£ l√†m s·∫°ch th√†nh c√¥ng! Kh√¥ng c√≤n h√¨nh ·∫£nh tr√πng l·∫∑p.");
    } else {
      console.log(`‚ö†Ô∏è  V·∫´n c√≤n ${recheckResult.duplicateImages} h√¨nh ·∫£nh tr√πng l·∫∑p.`);
    }

    // B∆∞·ªõc 4: Ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa ph√¢n trang
    console.log("\nüìÑ B∆∞·ªõc 4: Ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa ph√¢n trang");
    const paginationResult = await validatePaginationConsistency(10, 5);
    
    console.log(`\nüìä K·∫øt qu·∫£ ki·ªÉm tra ph√¢n trang:`);
    console.log(`- T·ªïng s·ªë s·∫£n ph·∫©m: ${paginationResult.totalProducts}`);
    console.log(`- T·ªïng s·ªë trang: ${paginationResult.totalPages}`);
    console.log(`- S·ªë s·∫£n ph·∫©m duy nh·∫•t: ${paginationResult.uniqueProducts}`);
    console.log(`- S·ªë h√¨nh ·∫£nh duy nh·∫•t: ${paginationResult.uniqueImages}`);
    console.log(`- S·ªë h√¨nh ·∫£nh tr√πng l·∫∑p trong ph√¢n trang: ${paginationResult.duplicateImagesInPagination}`);

    if (paginationResult.duplicateImagesInPagination === 0) {
      console.log("‚úÖ Ph√¢n trang ho·∫°t ƒë·ªông ch√≠nh x√°c! Kh√¥ng c√≥ h√¨nh ·∫£nh tr√πng l·∫∑p gi·ªØa c√°c trang.");
    } else {
      console.log(`‚ö†Ô∏è  C√≥ ${paginationResult.duplicateImagesInPagination} h√¨nh ·∫£nh tr√πng l·∫∑p trong ph√¢n trang.`);
    }

    console.log("\nüéâ Ho√†n th√†nh qu√° tr√¨nh l√†m s·∫°ch!");

  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh l√†m s·∫°ch:", error);
  } finally {
    await mongoose.disconnect();
    console.log("\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi database");
  }
}

// H√†m ki·ªÉm tra h√¨nh ·∫£nh tr√πng l·∫∑p (s·ª≠ d·ª•ng service)
async function checkDuplicateImages() {
  // S·ª≠ d·ª•ng API ƒë·ªÉ ki·ªÉm tra thay v√¨ truy c·∫≠p tr·ª±c ti·∫øp database
  try {
    const response = await fetch('http://localhost:3000/api/products/validate-pagination?pageSize=100&maxPages=1');
    const data = await response.json();
    
    return {
      totalProducts: data.totalProducts,
      uniqueImages: data.uniqueImages,
      duplicateImages: data.duplicateImagesInPagination,
      duplicateProducts: 0
    };
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra:", error);
    return {
      totalProducts: 0,
      uniqueImages: 0,
      duplicateImages: 0,
      duplicateProducts: 0
    };
  }
}

// Ch·∫°y script
cleanupDuplicateImages();
