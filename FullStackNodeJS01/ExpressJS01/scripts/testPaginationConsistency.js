// scripts/testPaginationConsistency.js
import mongoose from "mongoose";
import { connectDB } from "../src/config/db.js";
import { validatePaginationConsistency } from "../src/services/product.service.js";

async function testPaginationConsistency() {
  try {
    await connectDB();
    console.log("üß™ B·∫Øt ƒë·∫ßu test t√≠nh nh·∫•t qu√°n c·ªßa ph√¢n trang...");

    // Test v·ªõi c√°c k√≠ch th∆∞·ªõc trang kh√°c nhau
    const pageSizes = [5, 10, 20];
    
    for (const pageSize of pageSizes) {
      console.log(`\nüìä Test v·ªõi pageSize = ${pageSize}:`);
      const result = await validatePaginationConsistency(pageSize, 3);
      
      console.log(`- T·ªïng s·ªë s·∫£n ph·∫©m: ${result.totalProducts}`);
      console.log(`- T·ªïng s·ªë trang: ${result.totalPages}`);
      console.log(`- S·ªë s·∫£n ph·∫©m duy nh·∫•t: ${result.uniqueProducts}`);
      console.log(`- S·ªë h√¨nh ·∫£nh duy nh·∫•t: ${result.uniqueImages}`);
      console.log(`- S·ªë h√¨nh ·∫£nh tr√πng l·∫∑p trong ph√¢n trang: ${result.duplicateImagesInPagination}`);
      
      if (result.duplicateImagesInPagination === 0) {
        console.log("‚úÖ Ph√¢n trang ho·∫°t ƒë·ªông ch√≠nh x√°c!");
      } else {
        console.log("‚ö†Ô∏è  C√≥ h√¨nh ·∫£nh tr√πng l·∫∑p trong ph√¢n trang!");
      }
    }

    console.log("\nüéâ Ho√†n th√†nh test!");

  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh test:", error);
  } finally {
    await mongoose.disconnect();
    console.log("\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi database");
  }
}

// Ch·∫°y test
testPaginationConsistency();
