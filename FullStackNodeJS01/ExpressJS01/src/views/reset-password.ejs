<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            width: 100%;
            max-width: 450px;
            position: relative;
            overflow: hidden;
        }

        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #333;
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .header p {
            color: #666;
            font-size: 16px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
            font-size: 14px;
        }

        .form-group input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .password-requirements {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-top: 10px;
            font-size: 13px;
            color: #666;
        }

        .password-requirements ul {
            margin: 0;
            padding-left: 20px;
        }

        .password-requirements li {
            margin-bottom: 5px;
        }

        .btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .error-message {
            background: #fee;
            color: #c33;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #c33;
            font-size: 14px;
        }

        .success-message {
            background: #efe;
            color: #3c3;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #3c3;
            font-size: 14px;
        }

        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .back-link {
            text-align: center;
            margin-top: 20px;
        }

        .back-link a {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
        }

        .back-link a:hover {
            text-decoration: underline;
        }

        .password-strength {
            margin-top: 10px;
            height: 4px;
            background: #e1e5e9;
            border-radius: 2px;
            overflow: hidden;
        }

        .password-strength-bar {
            height: 100%;
            transition: all 0.3s ease;
            border-radius: 2px;
        }

        .strength-weak { background: #ff4757; width: 25%; }
        .strength-fair { background: #ffa502; width: 50%; }
        .strength-good { background: #2ed573; width: 75%; }
        .strength-strong { background: #1e90ff; width: 100%; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
            <% if (valid && email) { %>
                <p>Xin ch√†o! Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n <strong><%= email %></strong></p>
            <% } else { %>
                <p>Li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n</p>
            <% } %>
        </div>

        <% if (error) { %>
            <div class="error-message">
                <strong>L·ªói:</strong> <%= error %>
            </div>
        <% } %>

        <% if (valid) { %>
            <form id="resetForm">
                <div class="form-group">
                    <label for="password">M·∫≠t kh·∫©u m·ªõi</label>
                    <input type="password" id="password" name="password" required>
                    <div class="password-strength">
                        <div class="password-strength-bar" id="strengthBar"></div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</label>
                    <input type="password" id="confirmPassword" name="confirmPassword" required>
                </div>

                <div class="password-requirements">
                    <strong>Y√™u c·∫ßu m·∫≠t kh·∫©u:</strong>
                    <ul>
                        <li>√çt nh·∫•t 6 k√Ω t·ª±</li>
                        <li>C√≥ √≠t nh·∫•t 1 ch·ªØ hoa</li>
                        <li>C√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng</li>
                        <li>C√≥ √≠t nh·∫•t 1 s·ªë</li>
                    </ul>
                </div>

                <button type="submit" class="btn" id="submitBtn">
                    ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
                </button>
            </form>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>ƒêang x·ª≠ l√Ω...</p>
            </div>

            <div class="back-link">
                <a href="/">‚Üê V·ªÅ trang ch·ªß</a>
            </div>
        <% } else { %>
            <div class="back-link">
                <a href="/">‚Üê V·ªÅ trang ch·ªß</a>
            </div>
        <% } %>
    </div>

    <script>
        const form = document.getElementById('resetForm');
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const submitBtn = document.getElementById('submitBtn');
        const loading = document.getElementById('loading');
        const strengthBar = document.getElementById('strengthBar');

        // Password strength checker
        function checkPasswordStrength(password) {
            let strength = 0;
            if (password.length >= 6) strength++;
            if (/[a-z]/.test(password)) strength++;
            if (/[A-Z]/.test(password)) strength++;
            if (/\d/.test(password)) strength++;

            strengthBar.className = 'password-strength-bar';
            if (strength <= 1) strengthBar.classList.add('strength-weak');
            else if (strength === 2) strengthBar.classList.add('strength-fair');
            else if (strength === 3) strengthBar.classList.add('strength-good');
            else if (strength === 4) strengthBar.classList.add('strength-strong');
        }

        passwordInput.addEventListener('input', (e) => {
            checkPasswordStrength(e.target.value);
        });

        // Form submission
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            // Validate passwords match
            if (password !== confirmPassword) {
                showMessage('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!', 'error');
                return;
            }

            // Validate password strength
            if (password.length < 6) {
                showMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!', 'error');
                return;
            }

            if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password)) {
                showMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë!', 'error');
                return;
            }

            // Show loading
            submitBtn.disabled = true;
            loading.style.display = 'block';
            form.style.display = 'none';

            try {
                const response = await fetch('/api/users/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        token: '<%= token %>',
                        password: password
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showMessage('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng! B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß trong 3 gi√¢y...', 'success');
                    form.reset();
                    
                    // Redirect to home page after 3 seconds
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 3000);
                } else {
                    let errorMessage = 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.';
                    
                    switch (data.message) {
                        case 'TOKEN_INVALID_OR_EXPIRED':
                            errorMessage = 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.';
                            break;
                        case 'PASSWORD_TOO_SHORT':
                            errorMessage = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.';
                            break;
                        case 'PASSWORD_WEAK':
                            errorMessage = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë.';
                            break;
                        default:
                            errorMessage = data.message || errorMessage;
                    }
                    
                    showMessage(errorMessage, 'error');
                }
            } catch (error) {
                showMessage('C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
            } finally {
                // Hide loading
                submitBtn.disabled = false;
                loading.style.display = 'none';
                form.style.display = 'block';
            }
        });

        function showMessage(message, type) {
            // Remove existing messages
            const existingMessage = document.querySelector('.error-message, .success-message');
            if (existingMessage) {
                existingMessage.remove();
            }

            // Create new message
            const messageDiv = document.createElement('div');
            messageDiv.className = type === 'error' ? 'error-message' : 'success-message';
            
            if (type === 'success' && message.includes('chuy·ªÉn h∆∞·ªõng')) {
                messageDiv.innerHTML = `
                    <strong>Th√†nh c√¥ng:</strong> ${message}
                    <div style="margin-top: 15px;">
                        <button onclick="window.location.href='/'" 
                                style="background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; font-weight: 500;">
                            V·ªÅ trang ch·ªß
                        </button>
                    </div>
                `;
            } else {
                messageDiv.innerHTML = `<strong>${type === 'error' ? 'L·ªói:' : 'Th√†nh c√¥ng:'}</strong> ${message}`;
            }
            
            // Insert after header
            const header = document.querySelector('.header');
            header.insertAdjacentElement('afterend', messageDiv);

            // Scroll to top
            window.scrollTo(0, 0);
        }
    </script>
</body>
</html>
